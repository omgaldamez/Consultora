import {
  csvParse,
  dsv_default,
  tsvParse
} from "./chunk-7NNLYEYH.js";

// node_modules/d3-fetch/src/blob.js
function responseBlob(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.blob();
}
function blob_default(input, init) {
  return fetch(input, init).then(responseBlob);
}

// node_modules/d3-fetch/src/buffer.js
function responseArrayBuffer(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.arrayBuffer();
}
function buffer_default(input, init) {
  return fetch(input, init).then(responseArrayBuffer);
}

// node_modules/d3-fetch/src/text.js
function responseText(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  return response.text();
}
function text_default(input, init) {
  return fetch(input, init).then(responseText);
}

// node_modules/d3-fetch/src/dsv.js
function dsvParse(parse) {
  return function(input, init, row) {
    if (arguments.length === 2 && typeof init === "function")
      row = init, init = void 0;
    return text_default(input, init).then(function(response) {
      return parse(response, row);
    });
  };
}
function dsv(delimiter, input, init, row) {
  if (arguments.length === 3 && typeof init === "function")
    row = init, init = void 0;
  var format = dsv_default(delimiter);
  return text_default(input, init).then(function(response) {
    return format.parse(response, row);
  });
}
var csv = dsvParse(csvParse);
var tsv = dsvParse(tsvParse);

// node_modules/d3-fetch/src/image.js
function image_default(input, init) {
  return new Promise(function(resolve, reject) {
    var image = new Image();
    for (var key in init)
      image[key] = init[key];
    image.onerror = reject;
    image.onload = function() {
      resolve(image);
    };
    image.src = input;
  });
}

// node_modules/d3-fetch/src/json.js
function responseJson(response) {
  if (!response.ok)
    throw new Error(response.status + " " + response.statusText);
  if (response.status === 204 || response.status === 205)
    return;
  return response.json();
}
function json_default(input, init) {
  return fetch(input, init).then(responseJson);
}

// node_modules/d3-fetch/src/xml.js
function parser(type) {
  return (input, init) => text_default(input, init).then((text) => new DOMParser().parseFromString(text, type));
}
var xml_default = parser("application/xml");
var html = parser("text/html");
var svg = parser("image/svg+xml");

export {
  blob_default,
  buffer_default,
  text_default,
  dsv,
  csv,
  tsv,
  image_default,
  json_default,
  xml_default,
  html,
  svg
};
//# sourceMappingURL=chunk-EPXI7IPQ.js.map
